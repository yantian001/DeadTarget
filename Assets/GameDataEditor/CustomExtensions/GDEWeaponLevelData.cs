// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEWeaponLevelData : IGDEData
    {
        private static string isownedKey = "isowned";
		private bool _isowned;
        public bool isowned
        {
            get { return _isowned; }
            set {
                if (_isowned != value)
                {
                    _isowned = value;
                    GDEDataManager.SetBool(_key+"_"+isownedKey, _isowned);
                }
            }
        }

        private static string costKey = "cost";
		private int _cost;
        public int cost
        {
            get { return _cost; }
            set {
                if (_cost != value)
                {
                    _cost = value;
                    GDEDataManager.SetInt(_key+"_"+costKey, _cost);
                }
            }
        }

        private static string huoliKey = "huoli";
		private int _huoli;
        public int huoli
        {
            get { return _huoli; }
            set {
                if (_huoli != value)
                {
                    _huoli = value;
                    GDEDataManager.SetInt(_key+"_"+huoliKey, _huoli);
                }
            }
        }

        private static string danjiaKey = "danjia";
		private int _danjia;
        public int danjia
        {
            get { return _danjia; }
            set {
                if (_danjia != value)
                {
                    _danjia = value;
                    GDEDataManager.SetInt(_key+"_"+danjiaKey, _danjia);
                }
            }
        }

        private static string stabKey = "stab";
		private float _stab;
        public float stab
        {
            get { return _stab; }
            set {
                if (_stab != value)
                {
                    _stab = value;
                    GDEDataManager.SetFloat(_key+"_"+stabKey, _stab);
                }
            }
        }

        private static string firerateKey = "firerate";
		private float _firerate;
        public float firerate
        {
            get { return _firerate; }
            set {
                if (_firerate != value)
                {
                    _firerate = value;
                    GDEDataManager.SetFloat(_key+"_"+firerateKey, _firerate);
                }
            }
        }

        public GDEWeaponLevelData()
		{
			_key = string.Empty;
		}

		public GDEWeaponLevelData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isownedKey, out _isowned);
                dict.TryGetInt(costKey, out _cost);
                dict.TryGetInt(huoliKey, out _huoli);
                dict.TryGetInt(danjiaKey, out _danjia);
                dict.TryGetFloat(stabKey, out _stab);
                dict.TryGetFloat(firerateKey, out _firerate);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isowned = GDEDataManager.GetBool(_key+"_"+isownedKey, _isowned);
            _cost = GDEDataManager.GetInt(_key+"_"+costKey, _cost);
            _huoli = GDEDataManager.GetInt(_key+"_"+huoliKey, _huoli);
            _danjia = GDEDataManager.GetInt(_key+"_"+danjiaKey, _danjia);
            _stab = GDEDataManager.GetFloat(_key+"_"+stabKey, _stab);
            _firerate = GDEDataManager.GetFloat(_key+"_"+firerateKey, _firerate);
         }

        public void Reset_isowned()
        {
            GDEDataManager.ResetToDefault(_key, isownedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isownedKey, out _isowned);
        }

        public void Reset_cost()
        {
            GDEDataManager.ResetToDefault(_key, costKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(costKey, out _cost);
        }

        public void Reset_huoli()
        {
            GDEDataManager.ResetToDefault(_key, huoliKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(huoliKey, out _huoli);
        }

        public void Reset_danjia()
        {
            GDEDataManager.ResetToDefault(_key, danjiaKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(danjiaKey, out _danjia);
        }

        public void Reset_stab()
        {
            GDEDataManager.ResetToDefault(_key, stabKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(stabKey, out _stab);
        }

        public void Reset_firerate()
        {
            GDEDataManager.ResetToDefault(_key, firerateKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetFloat(firerateKey, out _firerate);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, costKey);
            GDEDataManager.ResetToDefault(_key, huoliKey);
            GDEDataManager.ResetToDefault(_key, danjiaKey);
            GDEDataManager.ResetToDefault(_key, stabKey);
            GDEDataManager.ResetToDefault(_key, firerateKey);
            GDEDataManager.ResetToDefault(_key, isownedKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
