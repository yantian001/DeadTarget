// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDEZombieData : IGDEData
    {
        private static string IdKey = "Id";
		private int _Id;
        public int Id
        {
            get { return _Id; }
            set {
                if (_Id != value)
                {
                    _Id = value;
                    GDEDataManager.SetInt(_key+"_"+IdKey, _Id);
                }
            }
        }

        private static string TotalHPKey = "TotalHP";
		private int _TotalHP;
        public int TotalHP
        {
            get { return _TotalHP; }
            set {
                if (_TotalHP != value)
                {
                    _TotalHP = value;
                    GDEDataManager.SetInt(_key+"_"+TotalHPKey, _TotalHP);
                }
            }
        }

        private static string DamageKey = "Damage";
		private int _Damage;
        public int Damage
        {
            get { return _Damage; }
            set {
                if (_Damage != value)
                {
                    _Damage = value;
                    GDEDataManager.SetInt(_key+"_"+DamageKey, _Damage);
                }
            }
        }

        private static string AttackSpeedKey = "AttackSpeed";
		private int _AttackSpeed;
        public int AttackSpeed
        {
            get { return _AttackSpeed; }
            set {
                if (_AttackSpeed != value)
                {
                    _AttackSpeed = value;
                    GDEDataManager.SetInt(_key+"_"+AttackSpeedKey, _AttackSpeed);
                }
            }
        }

        private static string NameKey = "Name";
		private string _Name;
        public string Name
        {
            get { return _Name; }
            set {
                if (_Name != value)
                {
                    _Name = value;
                    GDEDataManager.SetString(_key+"_"+NameKey, _Name);
                }
            }
        }

        public GDEZombieData()
		{
			_key = string.Empty;
		}

		public GDEZombieData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetInt(IdKey, out _Id);
                dict.TryGetInt(TotalHPKey, out _TotalHP);
                dict.TryGetInt(DamageKey, out _Damage);
                dict.TryGetInt(AttackSpeedKey, out _AttackSpeed);
                dict.TryGetString(NameKey, out _Name);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _Id = GDEDataManager.GetInt(_key+"_"+IdKey, _Id);
            _TotalHP = GDEDataManager.GetInt(_key+"_"+TotalHPKey, _TotalHP);
            _Damage = GDEDataManager.GetInt(_key+"_"+DamageKey, _Damage);
            _AttackSpeed = GDEDataManager.GetInt(_key+"_"+AttackSpeedKey, _AttackSpeed);
            _Name = GDEDataManager.GetString(_key+"_"+NameKey, _Name);
         }

        public void Reset_Id()
        {
            GDEDataManager.ResetToDefault(_key, IdKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(IdKey, out _Id);
        }

        public void Reset_TotalHP()
        {
            GDEDataManager.ResetToDefault(_key, TotalHPKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(TotalHPKey, out _TotalHP);
        }

        public void Reset_Damage()
        {
            GDEDataManager.ResetToDefault(_key, DamageKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(DamageKey, out _Damage);
        }

        public void Reset_AttackSpeed()
        {
            GDEDataManager.ResetToDefault(_key, AttackSpeedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(AttackSpeedKey, out _AttackSpeed);
        }

        public void Reset_Name()
        {
            GDEDataManager.ResetToDefault(_key, NameKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(NameKey, out _Name);
        }

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, IdKey);
            GDEDataManager.ResetToDefault(_key, NameKey);
            GDEDataManager.ResetToDefault(_key, TotalHPKey);
            GDEDataManager.ResetToDefault(_key, DamageKey);
            GDEDataManager.ResetToDefault(_key, AttackSpeedKey);


            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
