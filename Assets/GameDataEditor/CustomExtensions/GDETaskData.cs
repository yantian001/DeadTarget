// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by the Game Data Editor.
//
//      Changes to this file will be lost if the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using UnityEngine;
using System;
using System.Collections.Generic;

using GameDataEditor;

namespace GameDataEditor
{
    public class GDETaskData : IGDEData
    {
        private static string isLockedKey = "isLocked";
		private bool _isLocked;
        public bool isLocked
        {
            get { return _isLocked; }
            set {
                if (_isLocked != value)
                {
                    _isLocked = value;
                    GDEDataManager.SetBool(_key+"_"+isLockedKey, _isLocked);
                }
            }
        }

        private static string isClearedKey = "isCleared";
		private bool _isCleared;
        public bool isCleared
        {
            get { return _isCleared; }
            set {
                if (_isCleared != value)
                {
                    _isCleared = value;
                    GDEDataManager.SetBool(_key+"_"+isClearedKey, _isCleared);
                }
            }
        }

        private static string TaskNumKey = "TaskNum";
		private int _TaskNum;
        public int TaskNum
        {
            get { return _TaskNum; }
            set {
                if (_TaskNum != value)
                {
                    _TaskNum = value;
                    GDEDataManager.SetInt(_key+"_"+TaskNumKey, _TaskNum);
                }
            }
        }

        private static string TaskContentKey = "TaskContent";
		private string _TaskContent;
        public string TaskContent
        {
            get { return _TaskContent; }
            set {
                if (_TaskContent != value)
                {
                    _TaskContent = value;
                    GDEDataManager.SetString(_key+"_"+TaskContentKey, _TaskContent);
                }
            }
        }

        private static string TaskThumbKey = "TaskThumb";
		private string _TaskThumb;
        public string TaskThumb
        {
            get { return _TaskThumb; }
            set {
                if (_TaskThumb != value)
                {
                    _TaskThumb = value;
                    GDEDataManager.SetString(_key+"_"+TaskThumbKey, _TaskThumb);
                }
            }
        }

        private static string InfoKey = "Info";
		private GDETaskInfoData _Info;
        public GDETaskInfoData Info
        {
            get { return _Info; }
            set {
                if (_Info != value)
                {
                    _Info = value;
                    GDEDataManager.SetCustom(_key+"_"+InfoKey, _Info);
                }
            }
        }

        public GDETaskData()
		{
			_key = string.Empty;
		}

		public GDETaskData(string key)
		{
			_key = key;
		}
		
        public override void LoadFromDict(string dataKey, Dictionary<string, object> dict)
        {
            _key = dataKey;

			if (dict == null)
				LoadFromSavedData(dataKey);
			else
			{
                dict.TryGetBool(isLockedKey, out _isLocked);
                dict.TryGetBool(isClearedKey, out _isCleared);
                dict.TryGetInt(TaskNumKey, out _TaskNum);
                dict.TryGetString(TaskContentKey, out _TaskContent);
                dict.TryGetString(TaskThumbKey, out _TaskThumb);

                string customDataKey;
                dict.TryGetString(InfoKey, out customDataKey);
				GDEDataManager.DataDictionary.TryGetCustom(customDataKey, out _Info);
                LoadFromSavedData(dataKey);
			}
		}

        public override void LoadFromSavedData(string dataKey)
		{
			_key = dataKey;
			
            _isLocked = GDEDataManager.GetBool(_key+"_"+isLockedKey, _isLocked);
            _isCleared = GDEDataManager.GetBool(_key+"_"+isClearedKey, _isCleared);
            _TaskNum = GDEDataManager.GetInt(_key+"_"+TaskNumKey, _TaskNum);
            _TaskContent = GDEDataManager.GetString(_key+"_"+TaskContentKey, _TaskContent);
            _TaskThumb = GDEDataManager.GetString(_key+"_"+TaskThumbKey, _TaskThumb);

            _Info = GDEDataManager.GetCustom(_key+"_"+InfoKey, _Info);
         }

        public void Reset_isLocked()
        {
            GDEDataManager.ResetToDefault(_key, isLockedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isLockedKey, out _isLocked);
        }

        public void Reset_isCleared()
        {
            GDEDataManager.ResetToDefault(_key, isClearedKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetBool(isClearedKey, out _isCleared);
        }

        public void Reset_TaskNum()
        {
            GDEDataManager.ResetToDefault(_key, TaskNumKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetInt(TaskNumKey, out _TaskNum);
        }

        public void Reset_TaskContent()
        {
            GDEDataManager.ResetToDefault(_key, TaskContentKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(TaskContentKey, out _TaskContent);
        }

        public void Reset_TaskThumb()
        {
            GDEDataManager.ResetToDefault(_key, TaskThumbKey);

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            dict.TryGetString(TaskThumbKey, out _TaskThumb);
        }

        public void Reset_Info()
		{
			GDEDataManager.ResetToDefault(_key, InfoKey);

			Dictionary<string, object> dict;
	        GDEDataManager.Get(_key, out dict);

			string customDataKey;
            dict.TryGetString(InfoKey, out customDataKey);

            GDEDataManager.DataDictionary.TryGetCustom(customDataKey, out _Info);
			Info = GDEDataManager.GetCustom(_key+"_"+InfoKey, _Info);

			Info.ResetAll();
		}

        public void ResetAll()
        {
            GDEDataManager.ResetToDefault(_key, isLockedKey);
            GDEDataManager.ResetToDefault(_key, TaskContentKey);
            GDEDataManager.ResetToDefault(_key, TaskThumbKey);
            GDEDataManager.ResetToDefault(_key, TaskNumKey);
            GDEDataManager.ResetToDefault(_key, InfoKey);
            GDEDataManager.ResetToDefault(_key, isClearedKey);

            Reset_Info();

            Dictionary<string, object> dict;
            GDEDataManager.Get(_key, out dict);
            LoadFromDict(_key, dict);
        }
    }
}
